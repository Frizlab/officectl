/*
 * !!! File autogenerated by convert_email_xml_inputs_to_swift.swift
 * !!! Don’t change manually.
 *
 * EmailTests.swift
 * OfficeKitTests
 *
 * Created by convert_email_xml_inputs_to_swift.swift on 3/26/19.
 */

import XCTest
@testable import OfficeKit



class EmailTests : XCTestCase {
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId1() {
		let email = String(data: Data(#""#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId2() {
		let email = String(data: Data(#"test"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId3() {
		let email = String(data: Data(#"@"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId4() {
		let email = String(data: Data(#"test@"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId5() {
		let email = String(data: Data(#"test@io"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId6() {
		let email = String(data: Data(#"@io"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId7() {
		let email = String(data: Data(#"@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNolocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId8() {
		let email = String(data: Data(#"test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId9() {
		let email = String(data: Data(#"test@nominet.org.uk"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId10() {
		let email = String(data: Data(#"test@about.museum"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId11() {
		let email = String(data: Data(#"a@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId12() {
		let email = String(data: Data(#"test@e.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId13() {
		let email = String(data: Data(#"test@iana.a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId14() {
		let email = String(data: Data(#"test.test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId15() {
		let email = String(data: Data(#".test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId16() {
		let email = String(data: Data(#"test.@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId17() {
		let email = String(data: Data(#"test..iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId18() {
		let email = String(data: Data(#"test_exa-mple.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errNodomain)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId19() {
		let email = String(data: Data(#"!\043$%&`*+/=?^`{|}~@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId20() {
		let email = String(data: Data(#"test\\@test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId21() {
		let email = String(data: Data(#"123@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId22() {
		let email = String(data: Data(#"test@123.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId23() {
		let email = String(data: Data(#"test@iana.123"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId24() {
		let email = String(data: Data(#"test@255.255.255.255"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Tldnumeric)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId25() {
		let email = String(data: Data(#"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId26() {
		let email = String(data: Data(#"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklmn@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId27() {
		let email = String(data: Data(#"test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId28() {
		let email = String(data: Data(#"test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322LabelToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId29() {
		let email = String(data: Data(#"test@mason-dixon.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId30() {
		let email = String(data: Data(#"test@-iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDomainhyphenstart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId31() {
		let email = String(data: Data(#"test@iana-.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId32() {
		let email = String(data: Data(#"test@c--n.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId33() {
		let email = String(data: Data(#"test@iana.co-uk"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId34() {
		let email = String(data: Data(#"test@.iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDotStart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId35() {
		let email = String(data: Data(#"test@iana.org."#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDotEnd)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId36() {
		let email = String(data: Data(#"test@iana..com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errConsecutivedots)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId37() {
		let email = String(data: Data(#"a@a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId38() {
		let email = String(data: Data(#"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId39() {
		let email = String(data: Data(#"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId40() {
		let email = String(data: Data(#"a@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.hij"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Toolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId41() {
		let email = String(data: Data(#"a@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg.hijk"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322DomainToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId42() {
		let email = String(data: Data(#"\042test\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId43() {
		let email = String(data: Data(#"\042\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId44() {
		let email = String(data: Data(#"\042\042\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId45() {
		let email = String(data: Data(#"\042\\a\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId46() {
		let email = String(data: Data(#"\042\\\042\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId47() {
		let email = String(data: Data(#"\042\\\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId48() {
		let email = String(data: Data(#"\042\\\\\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId49() {
		let email = String(data: Data(#"test\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId50() {
		let email = String(data: Data(#"\042test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId51() {
		let email = String(data: Data(#"\042test\042test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errAtextAfterQs)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId52() {
		let email = String(data: Data(#"test\042text\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId53() {
		let email = String(data: Data(#"\042test\042\042test\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId54() {
		let email = String(data: Data(#"\042test\042.\042test\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId55() {
		let email = String(data: Data(#"\042test\\ test\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Quotedstring)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId56() {
		let email = String(data: Data(#"\042test\042.test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecLocalpart)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId57() {
		let email = String(data: Data(#"\042test\u2400\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId58() {
		let email = String(data: Data(#"\042test\\\u2400\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId59() {
		let email = String(data: Data(#"\042abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghj\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId60() {
		let email = String(data: Data(#"\042abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefg\\h\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322LocalToolong)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId61() {
		let email = String(data: Data(#"test@[255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId62() {
		let email = String(data: Data(#"test@a[255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId63() {
		let email = String(data: Data(#"test@[255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId64() {
		let email = String(data: Data(#"test@[255.255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId65() {
		let email = String(data: Data(#"test@[255.255.255.256]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId66() {
		let email = String(data: Data(#"test@[1111:2222:3333:4444:5555:6666:7777:8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId67() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666:7777]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId68() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId69() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666:7777:8888:9999]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId70() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666:7777:888G]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Badchar)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId71() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666::8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .rfc5321Ipv6Deprecated)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId72() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555::8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId73() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666::7777:8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId74() {
		let email = String(data: Data(#"test@[IPv6::3333:4444:5555:6666:7777:8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId75() {
		let email = String(data: Data(#"test@[IPv6:::3333:4444:5555:6666:7777:8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId76() {
		let email = String(data: Data(#"test@[IPv6:1111::4444:5555::8888]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId77() {
		let email = String(data: Data(#"test@[IPv6:::]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId78() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId79() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666:255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId80() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666:7777:255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Grpcount)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId81() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444::255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Addressliteral)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId82() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:5555:6666::255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Maxgrps)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId83() {
		let email = String(data: Data(#"test@[IPv6:1111:2222:3333:4444:::255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv62X2Xcolon)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId84() {
		let email = String(data: Data(#"test@[IPv6::255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonstrt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId85() {
		let email = String(data: Data(#" test @iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId86() {
		let email = String(data: Data(#"test@ iana .com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId87() {
		let email = String(data: Data(#"test . test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId88() {
		let email = String(data: Data(#"\u240d\u240a test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId89() {
		let email = String(data: Data(#"\u240d\u240a \u240d\u240a test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId90() {
		let email = String(data: Data(#"(comment)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId91() {
		let email = String(data: Data(#"((comment)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId92() {
		let email = String(data: Data(#"(comment(comment))test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId93() {
		let email = String(data: Data(#"test@(comment)iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId94() {
		let email = String(data: Data(#"test(comment)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errAtextAfterCfws)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId95() {
		let email = String(data: Data(#"test@(comment)[255.255.255.255]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId96() {
		let email = String(data: Data(#"(comment)abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghiklm@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId97() {
		let email = String(data: Data(#"test@(comment)abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghikl.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCfwsNearAt)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId98() {
		let email = String(data: Data(#"(comment)test@abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghik.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghik.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstu"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsComment)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId99() {
		let email = String(data: Data(#"test@iana.org\u240a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId100() {
		let email = String(data: Data(#"test@xn--hxajbheg2az3al.xn--jxalpdlp"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId101() {
		let email = String(data: Data(#"xn--test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId102() {
		let email = String(data: Data(#"test@iana.org-"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errDomainhyphenend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId103() {
		let email = String(data: Data(#"\042test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId104() {
		let email = String(data: Data(#"(test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId105() {
		let email = String(data: Data(#"test@(iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId106() {
		let email = String(data: Data(#"test@[1.2.3.4"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId107() {
		let email = String(data: Data(#"\042test\\\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedquotedstr)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId108() {
		let email = String(data: Data(#"(comment\\)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId109() {
		let email = String(data: Data(#"test@iana.org(comment\\)"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUnclosedcomment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId110() {
		let email = String(data: Data(#"test@iana.org(comment\\"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errBackslashend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId112() {
		let email = String(data: Data(#"test@[RFC-5322-domain-literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId113() {
		let email = String(data: Data(#"test@[RFC-5322]-domain-literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errAtextAfterDomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId114() {
		let email = String(data: Data(#"test@[RFC-5322-[domain-literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingDtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId115() {
		let email = String(data: Data(#"test@[RFC-5322-\\\u2407-domain-literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId116() {
		let email = String(data: Data(#"test@[RFC-5322-\\\u2409-domain-literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId117() {
		let email = String(data: Data(#"test@[RFC-5322-\\]-domain-literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322DomlitObsdtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId118() {
		let email = String(data: Data(#"test@[RFC-5322-domain-literal\\]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errUncloseddomlit)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId119() {
		let email = String(data: Data(#"test@[RFC-5322-domain-literal\\"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errBackslashend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId120() {
		let email = String(data: Data(#"test@[RFC 5322 domain literal]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId121() {
		let email = String(data: Data(#"test@[RFC-5322-domain-literal] (comment)"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domainliteral)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId122() {
		let email = String(data: Data(#"\177@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId123() {
		let email = String(data: Data(#"test@\177.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId124() {
		let email = String(data: Data(#"\042\177\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId125() {
		let email = String(data: Data(#"\042\\\177\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId126() {
		let email = String(data: Data(#"(\177)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId127() {
		let email = String(data: Data(#"test@iana.org\u240d"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId128() {
		let email = String(data: Data(#"\u240dtest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId129() {
		let email = String(data: Data(#"\042\u240dtest\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId130() {
		let email = String(data: Data(#"(\u240d)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId131() {
		let email = String(data: Data(#"test@iana.org(\u240d)"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errCrNoLf)
	}
	
	/* From Michael Rushton (https://squiloople.com/tag/email/) */
	func testXMLTestId132() {
		let email = String(data: Data(#"\u240atest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId133() {
		let email = String(data: Data(#"\042\u240a\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId134() {
		let email = String(data: Data(#"\042\\\u240a\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId135() {
		let email = String(data: Data(#"(\u240a)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId136() {
		let email = String(data: Data(#"\u2407@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId137() {
		let email = String(data: Data(#"test@\u2407.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingAtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId138() {
		let email = String(data: Data(#"\042\u2407\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecQtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId139() {
		let email = String(data: Data(#"\042\\\u2407\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecQp)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId140() {
		let email = String(data: Data(#"(\u2407)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecCtext)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId141() {
		let email = String(data: Data(#"\u240d\u240atest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId142() {
		let email = String(data: Data(#"\u240d\u240a \u240d\u240atest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId143() {
		let email = String(data: Data(#" \u240d\u240atest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId144() {
		let email = String(data: Data(#" \u240d\u240a test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId145() {
		let email = String(data: Data(#" \u240d\u240a \u240d\u240atest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId146() {
		let email = String(data: Data(#" \u240d\u240a\u240d\u240atest@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId147() {
		let email = String(data: Data(#" \u240d\u240a\u240d\u240a test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId148() {
		let email = String(data: Data(#"test@iana.org\u240d\u240a "#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId149() {
		let email = String(data: Data(#"test@iana.org\u240d\u240a \u240d\u240a "#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId150() {
		let email = String(data: Data(#"test@iana.org\u240d\u240a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId151() {
		let email = String(data: Data(#"test@iana.org\u240d\u240a \u240d\u240a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId152() {
		let email = String(data: Data(#"test@iana.org \u240d\u240a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId153() {
		let email = String(data: Data(#"test@iana.org \u240d\u240a "#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId154() {
		let email = String(data: Data(#"test@iana.org \u240d\u240a \u240d\u240a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfEnd)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId155() {
		let email = String(data: Data(#"test@iana.org \u240d\u240a\u240d\u240a"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId156() {
		let email = String(data: Data(#"test@iana.org \u240d\u240a\u240d\u240a "#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errFwsCrlfX2)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId157() {
		let email = String(data: Data(#" test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId158() {
		let email = String(data: Data(#"test@iana.org "#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .cfws)
		XCTAssertEqual(validationResult, .cfwsFws)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId159() {
		let email = String(data: Data(#"test@[IPv6:1::2:]"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Ipv6Colonend)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId160() {
		let email = String(data: Data(#"\042test\\\251\042@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .err)
		XCTAssertEqual(validationResult, .errExpectingQpair)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId161() {
		let email = String(data: Data(#"test@iana/icann.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5322)
		XCTAssertEqual(validationResult, .rfc5322Domain)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId165() {
		let email = String(data: Data(#"test.(comment)test@iana.org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .deprec)
		XCTAssertEqual(validationResult, .deprecComment)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId166() {
		let email = String(data: Data(#"test@org"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .rfc5321)
		XCTAssertEqual(validationResult, .rfc5321Tld)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId167() {
		let email = String(data: Data(#"test@test.com"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
	/* From Dominic Sayers (https://isemail.info) */
	func testXMLTestId168() {
		let email = String(data: Data(#"test@nic.no"#.utf8), encoding: .nonLossyASCII)!
		let validationResult = Email.evaluateEmail(email, checkDNS: false)
		XCTAssertEqual(validationResult.category, .validCategory)
		XCTAssertEqual(validationResult, .valid)
	}
	
}
