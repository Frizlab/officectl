/*
 * !!! File autogenerated by convert_email_xml_inputs_to_swift.swift
 * !!! Don’t change manually.
 *
 * Email+ValidationCodes.swift
 * OfficeKit
 *
 * Created by convert_email_xml_inputs_to_swift.swift on 3/26/19.
 */

import Foundation



extension Email {
	
	public struct ValidationCategory : Hashable {
		
		public static let validCategory = ValidationCategory(value: 1, xmlId: "ISEMAIL_VALID_CATEGORY", description: """
		Address is valid
		""")
		public static let dnswarn = ValidationCategory(value: 7, xmlId: "ISEMAIL_DNSWARN", description: """
		Address is valid but a DNS check was not successful
		""")
		public static let rfc5321 = ValidationCategory(value: 15, xmlId: "ISEMAIL_RFC5321", description: """
		Address is valid for SMTP but has unusual elements
		""")
		public static let cfws = ValidationCategory(value: 31, xmlId: "ISEMAIL_CFWS", description: """
		Address is valid within the message but cannot be used unmodified for the envelope
		""")
		public static let deprec = ValidationCategory(value: 63, xmlId: "ISEMAIL_DEPREC", description: """
		Address contains deprecated elements but may still be valid in restricted contexts
		""")
		public static let rfc5322 = ValidationCategory(value: 127, xmlId: "ISEMAIL_RFC5322", description: """
		The address is only valid according to the broad definition of RFC 5322. It is otherwise invalid.
		""")
		public static let err = ValidationCategory(value: 255, xmlId: "ISEMAIL_ERR", description: """
		Address is invalid for any purpose
		""")
		
		public let value: Int
		public let xmlId: String
		public let description: String

		private init(value v: Int, xmlId pi: String, description d: String) {
			value = v
			xmlId = pi
			description = d
		}
		
	}
	
}


extension Email {
	
	public struct ValidationSMTPInfo : Hashable {
		
		public static let code250215 = ValidationSMTPInfo(value: "2.1.5", xmlId: "ISEMAIL_META_SMTP_250_215", text: """
250 2.1.5 ok
""")
		public static let code553510 = ValidationSMTPInfo(value: "5.1.0", xmlId: "ISEMAIL_META_SMTP_553_510", text: """
553 5.1.0 Other address status
""")
		public static let code553511 = ValidationSMTPInfo(value: "5.1.1", xmlId: "ISEMAIL_META_SMTP_553_511", text: """
553 5.1.1 Bad destination mailbox address
""")
		public static let code553512 = ValidationSMTPInfo(value: "5.1.2", xmlId: "ISEMAIL_META_SMTP_553_512", text: """
553 5.1.2 Bad destination system address
""")
		public static let code553513 = ValidationSMTPInfo(value: "5.1.3", xmlId: "ISEMAIL_META_SMTP_553_513", text: """
553 5.1.3 Bad destination mailbox address syntax
""")
		
		public let value: String
		public let xmlId: String
		public let text: String

		private init(value v: String, xmlId pi: String, text t: String) {
			value = v
			xmlId = pi
			text = t
		}
		
	}
	
}


extension Email {
	
	public struct ValidationReference : Hashable {
		
		public static let localPart = ValidationReference(xmlId: "local-part", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   local-part      =   dot-atom / quoted-string / obs-local-part

   dot-atom        =   [CFWS] dot-atom-text [CFWS]

   dot-atom-text   =   1*atext *("." 1*atext)

   quoted-string   =   [CFWS]
                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                       [CFWS]

   obs-local-part  =   word *("." word)

   word            =   atom / quoted-string

   atom            =   [CFWS] 1*atext [CFWS]
""")
		public static let localPartMaximum = ValidationReference(xmlId: "local-part-maximum", blockQuoteName: "RFC 5322 section 4.5.3.1.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.5.3.1.1")!, blockQuote: """
		
   The maximum total length of a user name or other local-part is 64
   octets.
""")
		public static let obsLocalPart = ValidationReference(xmlId: "obs-local-part", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   obs-local-part  =   word *("." word)

   word            =   atom / quoted-string

   atom            =   [CFWS] 1*atext [CFWS]

   quoted-string   =   [CFWS]
                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                       [CFWS]

""")
		public static let dotAtom = ValidationReference(xmlId: "dot-atom", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   dot-atom        =   [CFWS] dot-atom-text [CFWS]

   dot-atom-text   =   1*atext *("." 1*atext)

""")
		public static let quotedString = ValidationReference(xmlId: "quoted-string", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   quoted-string   =   [CFWS]
                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE
                       [CFWS]

   qcontent        =   qtext / quoted-pair

   qtext           =   %d33 /             ; Printable US-ASCII
                       %d35-91 /          ;  characters not including
                       %d93-126 /         ;  "\" or the quote character
                       obs-qtext

   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp

""")
		public static let cfwsNearAt = ValidationReference(xmlId: "CFWS-near-at", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   Comments and folding white space
   SHOULD NOT be used around the "@" in the addr-spec.

""")
		public static let shouldNot = ValidationReference(xmlId: "SHOULD-NOT", blockQuoteName: "RFC 2119 section 4", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc2119")!, blockQuote: """
		
 4. SHOULD NOT   This phrase, or the phrase "NOT RECOMMENDED" mean that
    there may exist valid reasons in particular circumstances when the
    particular behavior is acceptable or even useful, but the full
    implications should be understood and the case carefully weighed
    before implementing any behavior described with this label.

""")
		public static let atext = ValidationReference(xmlId: "atext", blockQuoteName: "RFC 5322 section 3.2.3", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.2.3")!, blockQuote: """
		
    atext           =   ALPHA / DIGIT /    ; Printable US-ASCII
                        "!" / "#" /        ;  characters not including
                        "$" / "%" /        ;  specials.  Used for atoms.
                        "&" / "'" /
                        "*" / "+" /
                        "-" / "/" /
                        "=" / "?" /
                        "^" / "_" /
                        "`" / "{" /
                        "|" / "}" /
                        "~"

""")
		public static let obsDomain = ValidationReference(xmlId: "obs-domain", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   obs-domain      =   atom *("." atom)

   atom            =   [CFWS] 1*atext [CFWS]

""")
		public static let domainRfc5322 = ValidationReference(xmlId: "domain-RFC5322", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   domain          =   dot-atom / domain-literal / obs-domain

   dot-atom        =   [CFWS] dot-atom-text [CFWS]

   dot-atom-text   =   1*atext *("." 1*atext)

""")
		public static let domainRfc5321 = ValidationReference(xmlId: "domain-RFC5321", blockQuoteName: "RFC 5321 section 4.1.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.1.2")!, blockQuote: """
		
   Domain         = sub-domain *("." sub-domain)

""")
		public static let subDomain = ValidationReference(xmlId: "sub-domain", blockQuoteName: "RFC 5321 section 4.1.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.1.2")!, blockQuote: """
		
   Domain         = sub-domain *("." sub-domain)

   Let-dig        = ALPHA / DIGIT

   Ldh-str        = *( ALPHA / DIGIT / "-" ) Let-dig

""")
		public static let label = ValidationReference(xmlId: "label", blockQuoteName: "RFC 5321 section 4.1.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc1035#section-2.3.4")!, blockQuote: """
		
   labels          63 octets or less

""")
		public static let crlf = ValidationReference(xmlId: "CRLF", blockQuoteName: "RFC 5234 section 2.3", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5234#section-2.3")!, blockQuote: """
		
   CRLF        =  %d13.10

""")
		public static let cfws = ValidationReference(xmlId: "CFWS", blockQuoteName: "RFC 5322 section 3.2.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.2.2")!, blockQuote: """
		
   CFWS            =   (1*([FWS] comment) [FWS]) / FWS

   FWS             =   ([*WSP CRLF] 1*WSP) /  obs-FWS
                                          ; Folding white space

   comment         =   "(" *([FWS] ccontent) [FWS] ")"

   ccontent        =   ctext / quoted-pair / comment

   ctext           =   %d33-39 /          ; Printable US-ASCII
                       %d42-91 /          ;  characters not including
                       %d93-126 /         ;  "(", ")", or "\"
                       obs-ctext

""")
		public static let domainLiteral = ValidationReference(xmlId: "domain-literal", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]

""")
		public static let addressLiteral = ValidationReference(xmlId: "address-literal", blockQuoteName: "RFC 5321 section 4.1.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.1.2")!, blockQuote: """
		
   address-literal  = "[" ( IPv4-address-literal /
                    IPv6-address-literal /
                    General-address-literal ) "]"

""")
		public static let addressLiteralIpv4 = ValidationReference(xmlId: "address-literal-IPv4", blockQuoteName: "RFC 5321 section 4.1.3", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.1.3")!, blockQuote: """
		
   IPv4-address-literal  = Snum 3("."  Snum)

   Snum           = 1*3DIGIT
                  ; representing a decimal integer
                  ; value in the range 0 through 255

""")
		public static let addressLiteralIpv6 = ValidationReference(xmlId: "address-literal-IPv6", blockQuoteName: "RFC 5321 section 4.1.3", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.1.3")!, blockQuote: """
		
   IPv6-address-literal  = "IPv6:" IPv6-addr

   IPv6-addr      = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp

   IPv6-hex       = 1*4HEXDIG

   IPv6-full      = IPv6-hex 7(":" IPv6-hex)

   IPv6-comp      = [IPv6-hex *5(":" IPv6-hex)] "::"
                  [IPv6-hex *5(":" IPv6-hex)]
                  ; The "::" represents at least 2 16-bit groups of
                  ; zeros.  No more than 6 groups in addition to the
                  ; "::" may be present.

   IPv6v4-full    = IPv6-hex 5(":" IPv6-hex) ":" IPv4-address-literal

   IPv6v4-comp    = [IPv6-hex *3(":" IPv6-hex)] "::"
                  [IPv6-hex *3(":" IPv6-hex) ":"]
                  IPv4-address-literal
                  ; The "::" represents at least 2 16-bit groups of
                  ; zeros.  No more than 4 groups in addition to the
                  ; "::" and IPv4-address-literal may be present.

""")
		public static let dtext = ValidationReference(xmlId: "dtext", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   dtext           =   %d33-90 /          ; Printable US-ASCII
                       %d94-126 /         ;  characters not including
                       obs-dtext          ;  "[", "]", or "\"

""")
		public static let obsDtext = ValidationReference(xmlId: "obs-dtext", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   obs-dtext       =   obs-NO-WS-CTL / quoted-pair

   obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control
                       %d11 /             ;  characters that do not
                       %d12 /             ;  include the carriage
                       %d14-31 /          ;  return, line feed, and
                       %d127              ;  white space characters

""")
		public static let qtext = ValidationReference(xmlId: "qtext", blockQuoteName: "RFC 5322 section 3.2.4", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.2.4")!, blockQuote: """
		
   qtext           =   %d33 /             ; Printable US-ASCII
                       %d35-91 /          ;  characters not including
                       %d93-126 /         ;  "\" or the quote character
                       obs-qtext

""")
		public static let obsQtext = ValidationReference(xmlId: "obs-qtext", blockQuoteName: "RFC 5322 section 4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-4.1")!, blockQuote: """
		
   obs-qtext       =   obs-NO-WS-CTL

   obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control
                       %d11 /             ;  characters that do not
                       %d12 /             ;  include the carriage
                       %d14-31 /          ;  return, line feed, and
                       %d127              ;  white space characters

""")
		public static let ctext = ValidationReference(xmlId: "ctext", blockQuoteName: "RFC 5322 section 3.2.3", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.2.3")!, blockQuote: """
		
   ctext           =   %d33-39 /          ; Printable US-ASCII
                       %d42-91 /          ;  characters not including
                       %d93-126 /         ;  "(", ")", or "\"
                       obs-ctext

""")
		public static let obsCtext = ValidationReference(xmlId: "obs-ctext", blockQuoteName: "RFC 5322 section 4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-4.1")!, blockQuote: """
		
   obs-qtext       =   obs-NO-WS-CTL

   obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control
                       %d11 /             ;  characters that do not
                       %d12 /             ;  include the carriage
                       %d14-31 /          ;  return, line feed, and
                       %d127              ;  white space characters

""")
		public static let quotedPair = ValidationReference(xmlId: "quoted-pair", blockQuoteName: "RFC 5322 section 3.2.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.2.1")!, blockQuote: """
		
   quoted-pair     =   ("\" (VCHAR / WSP)) / obs-qp

   VCHAR           =  %d33-126            ; visible (printing) characters
   WSP             =  SP / HTAB           ; white space

""")
		public static let obsQp = ValidationReference(xmlId: "obs-qp", blockQuoteName: "RFC 5322 section 4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-4.1")!, blockQuote: """
		
   obs-qp          =   "\" (%d0 / obs-NO-WS-CTL / LF / CR)

   obs-NO-WS-CTL   =   %d1-8 /            ; US-ASCII control
                       %d11 /             ;  characters that do not
                       %d12 /             ;  include the carriage
                       %d14-31 /          ;  return, line feed, and
                       %d127              ;  white space characters

""")
		public static let tld = ValidationReference(xmlId: "TLD", blockQuoteName: "RFC 5321 section 2.3.5", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-2.3.5")!, blockQuote: """
		
   In the case
   of a top-level domain used by itself in an email address, a single
   string is used without any dots.  This makes the requirement,
   described in more detail below, that only fully-qualified domain
   names appear in SMTP transactions on the public Internet,
   particularly important where top-level domains are involved.

""")
		public static let tldFormat = ValidationReference(xmlId: "TLD-format", blockQuoteName: "John Klensin, RFC 1123 erratum 1353", blockQuoteURL: URL(string: "https://www.rfc-editor.org/errata_search.php?eid=1353")!, blockQuote: """
		
   Errata ID 1081, reported 2007-11-20, identifies a problem with the
   evolution of naming of top-level domains and the text of RFC 1123.
   It reads:

   Section 2.1 says:

                           However, a valid host name can never
   have the dotted-decimal form #.#.#.#, since at least the
   highest-level component label will be alphabetic.

   It should say:

                           However, a valid host name can never
   have the dotted-decimal form #.#.#.#, since at least the
   highest-level component label will be not all-numeric.

   Notes:

   RFC 3696 section 2 states: "There is an additional rule that
   essentially requires that top-level domain names not be
   all-numeric." The eleven IDN test TLDs created in
   September 2007 contain hyphen-minus as specified in the
   IDNA RFCs.
   It should say:

   However, a valid host name can never have the dotted-decimal
   form #.#.#.#, since this change does not permit the highest-level
   component label to start with a digit even if it is not all-numeric.
   Notes:

   This is a correct identification of the problem, but the wrong fix.
   RFC 3696, which ID 1081 cites, is an informational document that is
   deliberately relaxed about the fine details and says so. It is not
   relevant to determination of the text that should have been (with
   perfect knowledge of the future) in 1123.

   Based on discussions when we were doing RFC 1591 and subsequently,
   the expectation then (and presumably when 1123 was written) was
   that the name of any new TLD would follow the rules for the
   existing ones, i.e., that they would be exactly two or three
   characters long and be all-alphabetic (which is exactly what 1123
   says). The slightly-odd "will be" language in 1123 was, I believe,
   because that restriction was expected to be enforced by IANA,
   rather than being a protocol issue. ICANN, with a different set of
   assignment policies, effectively eliminated the length rule with
   the TLDs allocated in 2000. IDNA (RFC 3490) uses a syntax for IDNs
   that requires embedded hyphens in TLDs if there were ever to be an
   actual IDN TLD (hence the comment in ID 1081 about the IANA IDN
   testbed).

   While the proposed correction in Errata ID 1081 would fix the
   problem by imposing the narrowest possible restriction ("not
   all-numeric"), the original host name rule and the original
   statement in 1123 both assume the possibility of a minimal check
   to differentiate between domain names and IP addresses, i.e.,
   checking the first digit only. Because I believe that there are
   probably implementations that depend on such minimal parsing --some
   probably ancient and embedded-- it would appear to be wise to relax
   the rule as little as possible and, in particular, to restrict the
   "leading digit" exception to domains below the top-level, as 1123
   effectively does.

   The suggested text above reflects that reasoning. Because of the
   possible consequences of this issue, I would hope that it would be
   discussed with the relevant DNS-related WGs, the Root Server Advisory
   Committee (RSAC), and with IANA for comment and as a heads-up. This
   issue is substantive enough that it should probably be dealt with by
   a document that explicitly updates 1123 and that is processed on the
   Standards Track, but an accurate statement in the errata is the
   next-best option until that can be done. In the interim and while
   this suggestion is being discussed, Errata ID 1081 should probably
   be taken out of "validated" status.
""")
		public static let mailboxMaximum = ValidationReference(xmlId: "mailbox-maximum", blockQuoteName: "Dominic Sayers, RFC 3696 erratum 1690", blockQuoteURL: URL(string: "https://www.rfc-editor.org/errata_search.php?eid=1690")!, blockQuote: """
		
   However, there is a restriction in RFC 2821 on the length of an
   address in MAIL and RCPT commands of 254 characters.  Since addresses
   that do not fit in those fields are not normally useful, the upper
   limit on address lengths should normally be considered to be 254.

""")
		public static let domainMaximum = ValidationReference(xmlId: "domain-maximum", blockQuoteName: "RFC 5321 section 4.5.3.1.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc1035#section-4.5.3.1.2")!, blockQuote: """
		
   The maximum total length of a domain name or number is 255 octets.

""")
		public static let mailbox = ValidationReference(xmlId: "mailbox", blockQuoteName: "RFC 5321 section 4.1.2", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5321#section-4.1.2")!, blockQuote: """
		
   Mailbox        = Local-part "@" ( Domain / address-literal )

""")
		public static let addrSpec = ValidationReference(xmlId: "addr-spec", blockQuoteName: "RFC 5322 section 3.4.1", blockQuoteURL: URL(string: "https://tools.ietf.org/html/rfc5322#section-3.4.1")!, blockQuote: """
		
   addr-spec       =   local-part "@" domain

""")
		
		public let xmlId: String
		
		public let blockQuoteName: String
		public let blockQuoteURL: URL
		public let blockQuote: String

		private init(xmlId pi: String, blockQuoteName bqn: String, blockQuoteURL bqu: URL, blockQuote bq: String) {
			xmlId = pi
			blockQuoteName = bqn
			blockQuoteURL = bqu
			blockQuote = bq
		}
		
	}
	
}


extension Email {
	
	public struct ValidationDiagnosis : Hashable {
		
		public static let valid = ValidationDiagnosis(xmlId: "ISEMAIL_VALID", value: 0, category: .validCategory, smtpInfo: .code250215, references: [], description: """
Address is valid. Please note that this does not mean the address actually exists, nor even that the domain actually exists. This address could be issued by the domain owner without breaking the rules of any RFCs.
""")
		public static let dnswarnNoMxRecord = ValidationDiagnosis(xmlId: "ISEMAIL_DNSWARN_NO_MX_RECORD", value: 5, category: .dnswarn, smtpInfo: .code250215, references: [], description: """
Couldn't find an MX record for this domain but an A-record does exist
""")
		public static let dnswarnNoRecord = ValidationDiagnosis(xmlId: "ISEMAIL_DNSWARN_NO_RECORD", value: 6, category: .dnswarn, smtpInfo: .code250215, references: [], description: """
Couldn't find an MX record or an A-record for this domain
""")
		public static let rfc5321Tld = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5321_TLD", value: 9, category: .rfc5321, smtpInfo: .code250215, references: [.tld], description: """
Address is valid but at a Top Level Domain
""")
		public static let rfc5321Tldnumeric = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5321_TLDNUMERIC", value: 10, category: .rfc5321, smtpInfo: .code250215, references: [.tldFormat], description: """
Address is valid but the Top Level Domain begins with a number
""")
		public static let rfc5321Quotedstring = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5321_QUOTEDSTRING", value: 11, category: .rfc5321, smtpInfo: .code250215, references: [.quotedString], description: """
Address is valid but contains a quoted string
""")
		public static let rfc5321Addressliteral = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5321_ADDRESSLITERAL", value: 12, category: .rfc5321, smtpInfo: .code250215, references: [.addressLiteral, .addressLiteralIpv4], description: """
Address is valid but at a literal address not a domain
""")
		public static let rfc5321Ipv6Deprecated = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5321_IPV6DEPRECATED", value: 13, category: .deprec, smtpInfo: .code250215, references: [.addressLiteralIpv6], description: """
Address is valid but contains a :: that only elides one zero group. All implementations must accept and be able to handle any legitimate RFC 4291 format.
""")
		public static let cfwsComment = ValidationDiagnosis(xmlId: "ISEMAIL_CFWS_COMMENT", value: 17, category: .cfws, smtpInfo: .code250215, references: [.dotAtom], description: """
Address contains comments
""")
		public static let cfwsFws = ValidationDiagnosis(xmlId: "ISEMAIL_CFWS_FWS", value: 18, category: .cfws, smtpInfo: .code250215, references: [.localPart], description: """
Address contains Folding White Space
""")
		public static let deprecLocalpart = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_LOCALPART", value: 33, category: .deprec, smtpInfo: .code553511, references: [.obsLocalPart], description: """
The local part is in a deprecated form
""")
		public static let deprecFws = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_FWS", value: 34, category: .deprec, smtpInfo: .code553513, references: [.obsLocalPart, .obsDomain], description: """
Address contains an obsolete form of Folding White Space
""")
		public static let deprecQtext = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_QTEXT", value: 35, category: .deprec, smtpInfo: .code553513, references: [.obsQtext], description: """
A quoted string contains a deprecated character
""")
		public static let deprecQp = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_QP", value: 36, category: .deprec, smtpInfo: .code553513, references: [.obsQp], description: """
A quoted pair contains a deprecated character
""")
		public static let deprecComment = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_COMMENT", value: 37, category: .deprec, smtpInfo: .code553513, references: [.obsLocalPart, .obsDomain], description: """
Address contains a comment in a position that is deprecated
""")
		public static let deprecCtext = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_CTEXT", value: 38, category: .deprec, smtpInfo: .code553513, references: [.obsCtext], description: """
A comment contains a deprecated character
""")
		public static let deprecCfwsNearAt = ValidationDiagnosis(xmlId: "ISEMAIL_DEPREC_CFWS_NEAR_AT", value: 49, category: .deprec, smtpInfo: .code553513, references: [.cfwsNearAt, .shouldNot], description: """
Address contains a comment or Folding White Space around the @ sign
""")
		public static let rfc5322Domain = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_DOMAIN", value: 65, category: .rfc5322, smtpInfo: .code553512, references: [.domainRfc5322], description: """
Address is RFC 5322 compliant but contains domain characters that are not allowed by DNS
""")
		public static let rfc5322Toolong = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_TOOLONG", value: 66, category: .rfc5322, smtpInfo: .code553513, references: [.mailboxMaximum], description: """
Address is too long
""")
		public static let rfc5322LocalToolong = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_LOCAL_TOOLONG", value: 67, category: .rfc5322, smtpInfo: .code553511, references: [.localPartMaximum], description: """
The local part of the address is too long
""")
		public static let rfc5322DomainToolong = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_DOMAIN_TOOLONG", value: 68, category: .rfc5322, smtpInfo: .code553512, references: [.domainMaximum], description: """
The domain part is too long
""")
		public static let rfc5322LabelToolong = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_LABEL_TOOLONG", value: 69, category: .rfc5322, smtpInfo: .code553512, references: [.label], description: """
The domain part contains an element that is too long
""")
		public static let rfc5322Domainliteral = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_DOMAINLITERAL", value: 70, category: .rfc5322, smtpInfo: .code553513, references: [.domainLiteral], description: """
The domain literal is not a valid RFC 5321 address literal
""")
		public static let rfc5322DomlitObsdtext = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_DOMLIT_OBSDTEXT", value: 71, category: .rfc5322, smtpInfo: .code553513, references: [.obsDtext], description: """
The domain literal is not a valid RFC 5321 address literal and it contains obsolete characters
""")
		public static let rfc5322Ipv6Grpcount = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_IPV6_GRPCOUNT", value: 72, category: .rfc5322, smtpInfo: .code553513, references: [.addressLiteralIpv6], description: """
The IPv6 literal address contains the wrong number of groups
""")
		public static let rfc5322Ipv62X2Xcolon = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_IPV6_2X2XCOLON", value: 73, category: .rfc5322, smtpInfo: .code553513, references: [.addressLiteralIpv6], description: """
The IPv6 literal address contains too many :: sequences
""")
		public static let rfc5322Ipv6Badchar = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_IPV6_BADCHAR", value: 74, category: .rfc5322, smtpInfo: .code553513, references: [.addressLiteralIpv6], description: """
The IPv6 address contains an illegal group of characters
""")
		public static let rfc5322Ipv6Maxgrps = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_IPV6_MAXGRPS", value: 75, category: .rfc5322, smtpInfo: .code553513, references: [.addressLiteralIpv6], description: """
The IPv6 address has too many groups
""")
		public static let rfc5322Ipv6Colonstrt = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_IPV6_COLONSTRT", value: 76, category: .rfc5322, smtpInfo: .code553513, references: [.addressLiteralIpv6], description: """
IPv6 address starts with a single colon
""")
		public static let rfc5322Ipv6Colonend = ValidationDiagnosis(xmlId: "ISEMAIL_RFC5322_IPV6_COLONEND", value: 77, category: .rfc5322, smtpInfo: .code553513, references: [.addressLiteralIpv6], description: """
IPv6 address ends with a single colon
""")
		public static let errExpectingDtext = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_EXPECTING_DTEXT", value: 129, category: .err, smtpInfo: .code553512, references: [.dtext], description: """
A domain literal contains a character that is not allowed
""")
		public static let errNolocalpart = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_NOLOCALPART", value: 130, category: .err, smtpInfo: .code553511, references: [.localPart], description: """
Address has no local part
""")
		public static let errNodomain = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_NODOMAIN", value: 131, category: .err, smtpInfo: .code553512, references: [.addrSpec, .mailbox], description: """
Address has no domain part
""")
		public static let errConsecutivedots = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_CONSECUTIVEDOTS", value: 132, category: .err, smtpInfo: .code553511, references: [.localPart, .domainRfc5322, .domainRfc5321], description: """
The address may not contain consecutive dots
""")
		public static let errAtextAfterCfws = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_ATEXT_AFTER_CFWS", value: 133, category: .err, smtpInfo: .code553513, references: [.localPart, .domainRfc5322], description: """
Address contains text after a comment or Folding White Space
""")
		public static let errAtextAfterQs = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_ATEXT_AFTER_QS", value: 134, category: .err, smtpInfo: .code553511, references: [.localPart], description: """
Address contains text after a quoted string
""")
		public static let errAtextAfterDomlit = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_ATEXT_AFTER_DOMLIT", value: 135, category: .err, smtpInfo: .code553512, references: [.domainRfc5322], description: """
Extra characters were found after the end of the domain literal
""")
		public static let errExpectingQpair = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_EXPECTING_QPAIR", value: 136, category: .err, smtpInfo: .code553511, references: [.quotedPair], description: """
The address contains a character that is not allowed in a quoted pair
""")
		public static let errExpectingAtext = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_EXPECTING_ATEXT", value: 137, category: .err, smtpInfo: .code553511, references: [.atext], description: """
Address contains a character that is not allowed
""")
		public static let errExpectingQtext = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_EXPECTING_QTEXT", value: 138, category: .err, smtpInfo: .code553511, references: [.qtext], description: """
A quoted string contains a character that is not allowed
""")
		public static let errExpectingCtext = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_EXPECTING_CTEXT", value: 139, category: .err, smtpInfo: .code553511, references: [.qtext], description: """
A comment contains a character that is not allowed
""")
		public static let errBackslashend = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_BACKSLASHEND", value: 140, category: .err, smtpInfo: .code553512, references: [.domainRfc5322, .domainRfc5321, .quotedPair], description: """
The address can't end with a backslash
""")
		public static let errDotStart = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_DOT_START", value: 141, category: .err, smtpInfo: .code553511, references: [.localPart, .domainRfc5322, .domainRfc5321], description: """
Neither part of the address may begin with a dot
""")
		public static let errDotEnd = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_DOT_END", value: 142, category: .err, smtpInfo: .code553511, references: [.localPart, .domainRfc5322, .domainRfc5321], description: """
Neither part of the address may end with a dot
""")
		public static let errDomainhyphenstart = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_DOMAINHYPHENSTART", value: 143, category: .err, smtpInfo: .code553512, references: [.subDomain], description: """
A domain or subdomain cannot begin with a hyphen
""")
		public static let errDomainhyphenend = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_DOMAINHYPHENEND", value: 144, category: .err, smtpInfo: .code553512, references: [.subDomain], description: """
A domain or subdomain cannot end with a hyphen
""")
		public static let errUnclosedquotedstr = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_UNCLOSEDQUOTEDSTR", value: 145, category: .err, smtpInfo: .code553512, references: [.quotedString], description: """
Unclosed quoted string
""")
		public static let errUnclosedcomment = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_UNCLOSEDCOMMENT", value: 146, category: .err, smtpInfo: .code553512, references: [.cfws], description: """
Unclosed comment
""")
		public static let errUncloseddomlit = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_UNCLOSEDDOMLIT", value: 147, category: .err, smtpInfo: .code553512, references: [.domainLiteral], description: """
Domain literal is missing its closing bracket
""")
		public static let errFwsCrlfX2 = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_FWS_CRLF_X2", value: 148, category: .err, smtpInfo: .code553513, references: [.cfws], description: """
Folding White Space contains consecutive CRLF sequences
""")
		public static let errFwsCrlfEnd = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_FWS_CRLF_END", value: 149, category: .err, smtpInfo: .code553513, references: [.cfws], description: """
Folding White Space ends with a CRLF sequence
""")
		public static let errCrNoLf = ValidationDiagnosis(xmlId: "ISEMAIL_ERR_CR_NO_LF", value: 150, category: .err, smtpInfo: .code553513, references: [.cfws, .crlf], description: """
Address contains a carriage return that is not followed by a line feed
""")
		
		public let xmlId: String
		
		public let value: Int
		public let category: ValidationCategory
		public let smtpInfo: ValidationSMTPInfo
		public let references: [ValidationReference]
		public let description: String
		
		private init(xmlId pi: String, value v: Int, category c: ValidationCategory, smtpInfo si: ValidationSMTPInfo, references r: [ValidationReference], description d: String) {
			xmlId = pi
			value = v
			category = c
			smtpInfo = si
			references = r
			description = d
		}
		
	}
	
}
